// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model LyricBlock {
// 	id        String   @id @default(cuid())

// 	startLine Int
// 	endLine 	Int

// 	song		  Song 		 @relation(fields: [songId], references: [id])
// 	songId    String
// }

model Artist {
	id		String @id @default(cuid())
	name  String

	songs Song[]
}

model Song {
	id        	String   			@id @default(cuid())

	title				String
	artist			Artist				@relation(fields: [artistId], references: [id])
	artistId		String

	lyricBlocks String[]

	questions   Question[]

	rounds		  Round[] 
}

enum QuestionType {
	ARTIST
	TITLE
	FULL
}

model Question {
	id 			 			String @id @default(cuid())

	type		 			QuestionType
	wrongAnswers	String[]

	song 	 	 			Song @relation(fields: [songId], references: [id])
	songId 	 			String
}

model Guess {
	id 			 String @id @default(cuid())

	title 	 String
	artist 	 String

	player 	 Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
	playerId String

	round 	 Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)
	roundId  String

	isCorrect Boolean @default(false)
	score			Int			@default(0)
}


// 
model Round {
	id 				 String  @id @default(cuid())

	game			 Game 	 @relation(fields: [gameId], references: [id], onDelete: Cascade)
	gameId		 String

	song 			 Song 	 @relation(fields: [songId], references: [id])
	songId  	 String 

	blockIndex Int		 @default(1)

	guesses 	 Guess[]
}

model Game {
  id        		String   @id @default(cuid())
  createdAt 		DateTime @default(now())
  updatedAt 		DateTime @updatedAt

	gameCode			String 	 @default("")
	groupSocketId String 	 @default("")

	isActive			Boolean  @default(false) // can be joined/played
	isStarted			Boolean  @default(false)
	isCompleted		Boolean  @default(false)

	roundIndex		Int			 @default(0)

	rounds				Round[]
	players 			Player[]

	@@index([createdAt, gameCode])
}

// A player in a game
model Player {
  id 		 			String @id @default(cuid())
	socketId		String?

	displayName String @default("Anon")
	icon				String @default("")

	game   			Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
	gameId 			String

	guesses 		Guess[]
	totalScore	Int		 @default(0)
}
